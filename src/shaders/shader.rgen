#version 460

#extension GL_EXT_ray_tracing: require
#extension GL_EXT_scalar_block_layout: require
#extension GL_EXT_debug_printf: enable

#include "shader_common.glsl"

layout (binding = 0, rgba32f) uniform image2D storage_image;

layout (binding = 1) uniform accelerationStructureEXT tlas;

layout (binding = 2, scalar) buffer Vertices
{
    vec3 vertices[];
};

layout (binding = 3, scalar) buffer Indices
{
    uint indices[];
};

layout (binding = 4, rgba8) uniform image2D render_target;

layout (push_constant, scalar) uniform Push_constants
{
    uint global_frame_count;
    uint sample_count;
    uint samples_per_frame;
    vec3 camera_position;
    vec3 camera_dir_x;
    vec3 camera_dir_y;
    vec3 camera_dir_z;
    float sensor_distance;
    float sensor_half_width;
    float sensor_half_height;
    float focus_distance;
    float aperture_radius;
} push;

layout (location = 0) rayPayloadEXT Ray_payload payload;

float max_component(vec3 v)
{
    return v.x > v.y && v.x > v.z ? v.x : v.y > v.z ? v.y : v.z;
}

uint hash(uint x)
{
    x += x << 10;
    x ^= x >> 6;
    x += x << 3;
    x ^= x >> 11;
    x += x << 15;
    return x;
}

// Normal distribution with zero mean and unit standard deviation
vec2 sample_gaussian(inout uint rng_state)
{
    const float float_min = 1.175494351e-38;
    const float r = sqrt(-2.0 * log(max(float_min, random(rng_state))));
    const float theta = 2.0 * pi * random(rng_state);
    return r * vec2(cos(theta), sin(theta));
}

vec2 sample_disk(inout uint rng_state)
{
    const float r = sqrt(random(rng_state));
    const float theta = 2.0 * pi * random(rng_state);
    return r * vec2(cos(theta), sin(theta));
}

vec3 radiance(inout uint rng_state)
{
    vec3 accumulated_color = vec3(0.0);
    vec3 accumulated_reflectance = vec3(1.0);

    for (uint depth = 0; depth < 32; ++depth)
    {
        traceRayEXT(tlas,
                    gl_RayFlagsOpaqueEXT,
                    0xFF,
                    0,
                    0,
                    0,
                    payload.ray_origin,
                    0.0,
                    payload.ray_direction,
                    10000.0,
                    0);

        accumulated_color += accumulated_reflectance * payload.emissivity;
        if (payload.hit_sky)
        {
            return accumulated_color;
        }

        vec3 hit_color = payload.color;
        const float p = max_component(hit_color);
        if (random(payload.rng_state) < p)
        {
            hit_color /= p;
        }
        else
        {
            return accumulated_color;
        }
        accumulated_reflectance *= hit_color;
    }

    return accumulated_color;
}

void main()
{
    const uvec2 image_size = imageSize(storage_image);

    if (gl_LaunchIDEXT.x >= image_size.x || gl_LaunchIDEXT.y >= image_size.y)
    {
        return;
    }

    const uint pixel_index = gl_LaunchIDEXT.y * image_size.x + gl_LaunchIDEXT.x;
    uint rng_state = hash(pixel_index) ^ hash(push.global_frame_count + 1);
    payload.rng_state = rng_state;

    vec4 pixel_accumulated_color = vec4(0.0);

    for (uint s = 0; s < push.samples_per_frame; ++s)
    {
        const vec2 offset = vec2(0.5) + 0.375 * sample_gaussian(rng_state);
        const vec2 uv = 2.0 * (vec2(gl_LaunchIDEXT.xy) + offset) / vec2(image_size) - vec2(1.0);

        const vec2 defocus = push.aperture_radius * sample_disk(rng_state);
        const vec3 defocus_offset = push.camera_dir_x * defocus.x + push.camera_dir_y * defocus.y;
        payload.ray_origin = push.camera_position + defocus_offset;
        payload.ray_direction = normalize(push.focus_distance *
            (push.camera_dir_z * push.sensor_distance
                + push.camera_dir_x * push.sensor_half_width * uv.x
                + push.camera_dir_y * push.sensor_half_height * uv.y)
            - defocus_offset);

        pixel_accumulated_color += vec4(radiance(rng_state), 1.0);
    }

    vec4 average_color = imageLoad(storage_image, ivec2(gl_LaunchIDEXT.xy));
    // NOTE: if the image is uninitialized, it might contain NaNs which will propagate.
    // So we must explicitely handle the first sample.
    // TODO: it is probably better to clear the image to zero when creating it, and then always
    // load the old value even if we will end up multiplying it by zero on a render reset.
    if (push.sample_count > 0)
    {
        average_color = (average_color * push.sample_count + pixel_accumulated_color) / (push.sample_count + push.samples_per_frame);
    }
    else
    {
        average_color = pixel_accumulated_color / push.samples_per_frame;    
    }
    imageStore(storage_image, ivec2(gl_LaunchIDEXT.xy), average_color);
    
    // TODO: this is where we would do our tone-mapping etc.
    const vec4 render_color = clamp(average_color, 0.0, 1.0);
    imageStore(render_target, ivec2(gl_LaunchIDEXT.xy), render_color);
}
