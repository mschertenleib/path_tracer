#version 460

#extension GL_EXT_ray_tracing: require
#extension GL_EXT_scalar_block_layout: require
#extension GL_EXT_debug_printf: enable

#include "shader_common.glsl"

layout (binding = 0, rgba32f) uniform image2D storage_image;

layout (binding = 1) uniform accelerationStructureEXT tlas;

layout (binding = 2, scalar) buffer Vertices
{
    vec3 vertices[];
};

layout (binding = 3, scalar) buffer Indices
{
    uint indices[];
};

layout (push_constant) uniform Push_constants
{
    uint global_frame_count;
    uint sample_count;
    uint samples_per_frame;
} push;

layout (location = 0) rayPayloadEXT Ray_payload payload;

float max_component(vec3 v)
{
    return v.x > v.y && v.x > v.z ? v.x : v.y > v.z ? v.y : v.z;
}

vec3 radiance(inout uint rng_state)
{
    vec3 accumulated_color = vec3(0.0);
    vec3 accumulated_reflectance = vec3(1.0);

    for (uint depth = 0; depth < 32; ++depth)
    {
        traceRayEXT(tlas,
                    gl_RayFlagsOpaqueEXT,
                    0xFF,
                    0,
                    0,
                    0,
                    payload.ray_origin,
                    0.0,
                    payload.ray_direction,
                    10000.0,
                    0);

        accumulated_color += accumulated_reflectance * payload.emissivity;
        if (payload.hit_sky)
        {
            return accumulated_color;
        }

        vec3 hit_color = payload.color;
        const float p = max_component(hit_color);
        if (random(payload.rng_state) < p)
        {
            hit_color /= p;
        }
        else
        {
            return accumulated_color;
        }
        accumulated_reflectance *= hit_color;
    }

    return accumulated_color;
}

void main()
{
    const uvec2 image_size = imageSize(storage_image);

    if (gl_LaunchIDEXT.x >= image_size.x || gl_LaunchIDEXT.y >= image_size.y)
    {
        return;
    }

    #if 1
    const vec3 camera_position = vec3(278.0, 273.0, -800.0);
    const vec3 look_at = vec3(278.0, 273.0, 0.0);
    const vec3 up = vec3(0.0, 1.0, 0.0);
    const float focal_length = 0.035;
    const float sensor_height = 0.025;
    const float aspect_ratio = float(image_size.x) / float(image_size.y);
    const vec3 camera_local_z = normalize(camera_position - look_at);
    const vec3 camera_local_x = normalize(cross(up, camera_local_z));
    const vec3 camera_local_y = cross(camera_local_z, camera_local_x);
    const float viewport_height = sensor_height / focal_length;
    const float viewport_width = aspect_ratio * viewport_height;
    const vec3 camera_horizontal = viewport_width * camera_local_x;
    const vec3 camera_vertical = viewport_height * camera_local_y;
    const vec3 camera_lower_left_corner = -camera_horizontal * 0.5 - camera_vertical * 0.5 - camera_local_z;
    #else
    const vec3 camera_position = vec3(-0.07, 0.15, 0.2);
    const vec3 look_at = vec3(-0.02, 0.12, 0.0);
    const vec3 up = vec3(0.0, 1.0, 0.0);
    const float vertical_fov = radians(45.0);
    const float aspect_ratio = float(image_size.x) / float(image_size.y);
    const vec3 camera_local_z = normalize(camera_position - look_at);
    const vec3 camera_local_x = normalize(cross(up, camera_local_z));
    const vec3 camera_local_y = normalize(cross(camera_local_z, camera_local_x));
    const float viewport_height = 2.0 * tan(vertical_fov * 0.5);
    const float viewport_width = aspect_ratio * viewport_height;
    const vec3 camera_horizontal = viewport_width * camera_local_x;
    const vec3 camera_vertical = viewport_height * camera_local_y;
    const vec3 camera_lower_left_corner = -camera_horizontal * 0.5 - camera_vertical * 0.5 - camera_local_z;
    #endif

    const uint pixel_index = gl_LaunchIDEXT.y * image_size.x + gl_LaunchIDEXT.x;
    uint rng_state = hash(pixel_index) ^ hash(push.global_frame_count + 1);
    payload.rng_state = rng_state;

    vec4 pixel_accumulated_color = vec4(0.0);

    for (uint s = 0; s < push.samples_per_frame; ++s)
    {
        const float u_offset = random(rng_state);
        const float v_offset = random(rng_state);
        const float u = (float(gl_LaunchIDEXT.x) + u_offset) / float(image_size.x);
        const float v = (float(image_size.y - 1 - gl_LaunchIDEXT.y) + v_offset) / float(image_size.y);

        payload.ray_origin = camera_position;
        payload.ray_direction = normalize(
            camera_lower_left_corner +
            u * camera_horizontal +
            v * camera_vertical);

        pixel_accumulated_color += vec4(radiance(rng_state), 1.0);
    }

    vec4 average_color = imageLoad(storage_image, ivec2(gl_LaunchIDEXT.xy));
    average_color = (average_color * push.sample_count + pixel_accumulated_color) / (push.sample_count + push.samples_per_frame);
    imageStore(storage_image, ivec2(gl_LaunchIDEXT.xy), average_color);
}
